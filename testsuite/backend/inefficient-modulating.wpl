fun comp modulate_qpsk () {
  var x:arr[2] bit;
  var outc : complex16; 
  let amp = 1 in         -- 1/sqrt(2)

  repeat [8,4] 
  seq {

    -- TODO: put take 2
    y0 <- take;
    y1 <- take;
    do { 
      x[0] := y0;
      x[1] := y1; 

      if (x[0] == bit(0) && x[1] == bit(1)) then { 
         outc := complex16{re=(-amp);im=amp} 
      } else {
        if (x[0] == bit(0) && x[1] == bit(0)) then { 
          outc := complex16{re=(-amp); im=(-amp)}
        } else {
          if (x[0] == bit(1) && x[1] == bit(1)) then { 
            outc := complex16{re=amp;im=amp}
          } else { 
            outc := complex16{re=amp;im=(-amp)} 
          }
        } 
      }
    };
    emit outc
  }
}

let comp main = read >>> modulate_qpsk() >>> write






