-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

-- Used with macros to create a simple template structure

let comp [8, CRC_VEC] CRC_NAME (len : int) =  
  times len seq {
    (x:arr[8] bit) <- takes 8;
    emits x;
  };
  emits {'0,'0,'0,'0};
  emits {'0,'0,'0,'0};

  -- Add padding so that the length of output is a multiple of CRC_VEC in bits
  let len_so_far = (len+1) * 8 in 
  let len_mod = if len_so_far % CRC_VEC > 0 then 1 else 0 in 
  let final_len = ((len_so_far / CRC_VEC) + len_mod) * CRC_VEC in
  times (final_len - len_so_far) emits {'0,'0,'0,'0,'0,'0,'0,'0};

  return {'0,'0,'0,'0};
in
