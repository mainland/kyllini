-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

-- Trigonometry


fun external sin_int16(x:int16) : int16
fun external cos_int16(x:int16) : int16
fun external atan2_int16(y:int16, x:int16) : int16
fun external atan2_int32(y:int32, x:int32) : int32


-- ext_math
let pi = 3.1415926536
fun external sine_double_int16(x:int16, prec:int16) : int16
fun external sine_double_int32(x:int32, prec:int32) : int32
fun external cosine_double_int16(x:int16, prec:int16) : int16
fun external cosine_double_int32(x:int32, prec:int32) : int32

fun external imin_int16(x:int16, y:int16) : int16
fun external imin_int32(x:int, y:int) : int
fun external imax_int16(x:int16, y:int16) : int16
fun external imax_int32(x:int, y:int) : int

fun external ceil_int16(d:double) : int16
fun external ceil_int32(d:double) : int32
fun external round_int16(d:double) : int16
fun external round_int32(d:double) : int32

fun external log2(d:double) : double
fun external log2_int16(d:int16) : int16
fun external log2_int32(d:int32) : int32

fun external sqrt(d:double) : double
fun external sqrt_int16(d:int16) : int16
fun external sqrt_int32(d:int32) : int32



-- SIMD

-- CHECK, unify, and make inputs polymorphic
-- Sums all components of a vector x of length 4
fun external sumc16 (x:arr[4] complex16): complex16
fun external sumc32 (x:arr[4] complex32): complex32
fun external sumi16 (x:arr[4] int16): int16
fun external sumi32 (x:arr[4] int): int
-- Sums all components of a vector x of arbitrary length
-- complex32 & int 16 not supported by Sora (yet?)
fun external v_sum_int32(x:arr int32 ) : int32
fun external v_sum_int16(x:arr int16 ) : int16
fun external v_sum_complex16(x:arr complex16 ) : complex16
fun external v_sum_complex32(x:arr complex32 ) : complex32


-- equivalent to sora hadd:
-- Sum all components of vector x and stores it in all components of z
-- z(i) = sum(x) for all i
fun external v_hadd_int32(var z:arr[4] int32, x:arr[4] int32) : ()
fun external v_hadd_complex16(var z:arr[4] complex16, x:arr[4] complex16) : ()



-- fun external addw(x:arr[4] complex16, y:arr[4] complex16, z:arr[4] complex16 ) : ()
-- c := a + b
fun external v_add_complex16(var c:arr complex16, a:arr[length(c)] complex16, b:arr[length(c)] complex16 ) : ()
fun external v_add_complex32(var c:arr complex32, a:arr[length(c)] complex32, b:arr[length(c)] complex32 ) : ()
fun external v_add_int16(var c:arr int16, a:arr[length(c)] int16, b:arr[length(c)] int16 ) : ()
fun external v_add_int32(var c:arr int32, a:arr[length(c)] int32, b:arr[length(c)] int32 ) : ()

-- c := a - b
fun external v_sub_complex16(var c:arr complex16, a:arr[length(c)] complex16, b:arr[length(c)] complex16 ) : ()
fun external v_sub_complex32(var c:arr complex32, a:arr[length(c)] complex32, b:arr[length(c)] complex32 ) : ()
fun external v_sub_int16(var c:arr int16, a:arr[length(c)] int16, b:arr[length(c)] int16 ) : ()
fun external v_sub_int32(var c:arr int32, a:arr[length(c)] int32, b:arr[length(c)] int32 ) : ()

-- c := a * b, NB: c is also complex16
--fun external v_mul_complex16(var c:arr complex16, a:arr[length(c)] complex16, b:arr[length(c)] complex16 ) : ()
fun external v_mul_complex16(var c:arr complex16, a:arr[length(c)] complex16, b:arr[length(c)] complex16, shift:int ) : ()
fun external v_mul_complex16_int32(var re:arr int32, var im:arr[length(re)] int32, a:arr[length(re)] complex16, b:arr[length(re)] complex16) : ()

-- c := a * conj(b), NB: c is also complex16
fun external v_conj_mul_complex16(var c:arr complex16, a:arr[length(c)] complex16, b:arr[length(c)] complex16, shift:int ) : ()
fun external v_conj_mul_complex16_int32(var re:arr int32, var im:arr[length(re)] int32, a:arr[length(re)] complex16, b:arr[length(re)] complex16) : ()





-- z := x >> shift
fun external v_shift_right_complex32(var z:arr complex32, x:arr[length(z)] complex32, shift:int ) : ()
fun external v_shift_right_complex16(var z:arr complex16, x:arr[length(z)] complex16, shift:int ) : ()
fun external v_shift_right_int32(var z:arr int32, x:arr[length(z)] int32, shift:int ) : ()
fun external v_shift_right_int16(var z:arr int16, x:arr[length(z)] int16, shift:int ) : ()
-- z := x << shift
fun external v_shift_left_complex32(var z:arr complex32, x:arr[length(z)] complex32, shift:int ) : ()
fun external v_shift_left_complex16(var z:arr complex16, x:arr[length(z)] complex16, shift:int ) : ()
fun external v_shift_left_int32(var z:arr int32, x:arr[length(z)] int32, shift:int ) : ()
fun external v_shift_left_int16(var z:arr int16, x:arr[length(z)] int16, shift:int ) : ()






-- Set array to zero
fun external zero_bit(var x:arr bit) : ()
fun external zero_complex8(var x:arr complex8) : ()
fun external zero_complex16(var x:arr complex16) : ()
fun external zero_complex32(var x:arr complex32) : ()
fun external zero_int8(var x:arr int8) : ()
fun external zero_int16(var x:arr int16) : ()
fun external zero_int32(var x:arr int32) : ()

-- Copy subarray
-- Equivalent to memcpy in C
-- NB: When len is constant, this can be done with dst[0,len] := src[0,len]
--     But this doesn't work for dynamic len
-- NOTE: copy_bit is not trivial to write. TBD
fun external copy_complex8(var dst:arr complex8, src:arr complex8, len:int) : ()
fun external copy_complex16(var dst:arr complex16, src:arr complex16, len:int) : ()
fun external copy_complex32(var dst:arr complex32, src:arr complex32, len:int) : ()
fun external copy_int8(var dst:arr int8, src:arr int8, len:int) : ()
fun external copy_int16(var dst:arr int16, src:arr int16, len:int) : ()
fun external copy_int32(var dst:arr int32, src:arr int32, len:int) : ()

-- Conversions
fun external bits_to_int8(var dst: arr int8, src:arr bit) : ()
fun external int8_to_bits(var dst: arr bit, src:arr int8) : ()

-- Output
fun external hexprint_int8(a : arr int8, length : int) : ()


-- Various packings
-- Pack two int32 arrays into int16 array
fun external v_pack_int32_complex16(var z:arr complex16, x:arr[length(z)] int32, y:arr[length(z)] int32) : ()
fun external v_pack_complex16_complex8(input:arr complex16) : arr[length(input)] complex8




-- Bit manipulation

fun external v_or(input1 : arr bit, input2 : arr[length(input1)] bit)     : arr[length(input1)] bit
fun external v_and(input1 : arr bit, input2 : arr[length(input1)] bit)    : arr[length(input1)] bit
fun external v_andnot(input1 : arr bit, input2 : arr[length(input1)] bit) : arr[length(input1)] bit
fun external v_xor(input1 : arr bit, input2 : arr[length(input1)] bit)    : arr[length(input1)] bit


-- Specialized fast versions for 1 byte (8 bits)
fun external v_or8(input1 : arr[8] bit, input2 : arr[8] bit)     : arr[8] bit
fun external v_and8(input1 : arr[8] bit, input2 : arr[8] bit)    : arr[8] bit
fun external v_andnot8(input1 : arr[8] bit, input2 : arr[8] bit) : arr[8] bit
fun external v_xor8(input1 : arr[8] bit, input2 : arr[8] bit)    : arr[8] bit






-- Casts:
fun external v_cast_complex8_int8(var output:arr int8, input:arr complex8) : ()  


-- Arithmetics:
fun external v_negate_complex8(input:arr complex8) : arr[length(input)] complex8  
-- Sign operations (essentially applies _mm_sign_epi8)  
fun external v_sign_int8(input1 : arr int8, input2 : arr[length(input1)] int8)    : arr[length(input1)] int8  

  




------ SORA Code:

fun external v_downsample_complex16(input:arr complex16) : arr[length(input)] complex16; 

-- FFT
--fun external sora_ifft(nFFTSize : int16, inp : arr complex16, out : arr [length(inp)] complex16) : ()
--fun external sora_fft(nFFTSize : int16, inp : arr complex16, out : arr [length(inp)] complex16) : ()
fun external sora_ifft(inp : arr complex16) : arr [length(inp)] complex16
fun external sora_fft(inp : arr complex16) : arr [length(inp)] complex16

-- Same as above, as it operates on subarray of inp/outp, so useful for dynamically sized arrays
fun external sora_ifft_dynamic(nFFTSize : int16, inp : arr complex16) : arr [length(inp)] complex16
fun external sora_fft_dynamic(nFFTSize : int16, inp : arr complex16) : arr [length(inp)] complex16



-- Do we still need this?
-- Viterbi


-- Fast version which use MSR-LA license
fun external viterbi_brick_init_fast(frame_length:int, code_rate:int16, depth:int16): ()
fun external impure viterbi_brick_decode_fast(svalue:arr[48] int8, var bitValue:arr bit): int16
fun external impure viterbiSig11a_brick_decode_fast(svalue:arr[48] int8, var bitValue:arr bit): int16


-- DbgPlot library (works only in 32-bit mode)
fun external dbgplot_real_line(data: arr int16) : ()
fun external dbgplot_real_line32(data: arr int32) : ()
fun external dbgplot_complex_line(data:arr complex16, type:int16) : ()
fun external dbgplot_spectrum(item:arr complex16) : ()
fun external dbgplot_dots(data:arr complex16) : ()
fun external dbgplot_dot(data:complex16) : ()


-- Time-related
fun external print_time() : ()

-- Start recording time
fun external record_time_start() : ()
-- Print time elapsed in (ns) since last record_time_start()
fun external record_time_stop()  : ()

-- Populate a bit array with random stuff
fun external populate_rand_array(var a : arr bit) : ()


-- Dummy functions that can be insterted to preven Ziria compiler to overdo with inlining
fun external do_not_inline_int8(x: int8) : int8
fun external do_not_inline_int16(x: int16) : int16
fun external do_not_inline_int32(x: int32) : int32
fun external do_not_inline_int64(x: int64) : int64
fun external do_not_inline_complex8(x: complex8) : complex8
fun external do_not_inline_complex16(x: complex16) : complex16
fun external do_not_inline_complex32(x: complex32) : complex32
fun external do_not_inline_complex64(x: complex64) : complex64
