fun comp modulate_64qam () {
var re:int16;
var im:int16;
var outc : complex16; 
let amp = 1 in         -- 1/sqrt(2)

repeat [12,2]
  seq {

    x <- takes 6;
    do { 

      if (x[0] == '0 && x[1] == '0 && x[2] == '0) then {
         re := -7*amp
      } else {
        if (x[0] == '0 && x[1] == '0 && x[2] == '1) then {
          re := -5*amp
   	} else {
          if (x[0] == '0 && x[1] == '1 && x[2] == '1) then {
            re := -3*amp
	  } else {
            if (x[0] == '0 && x[1] == '1 && x[2] == '0) then {
              re := -1*amp
	    } else {
              if (x[0] == '1 && x[1] == '1 && x[2] == '0) then {
                re := amp
  	      } else {
                if (x[0] == '1 && x[1] == '1 && x[2] == '1) then {
                  re := 3*amp
    	        } else {
                  if (x[0] == '1 && x[1] == '0 && x[2] == '1) then {
                    re := 5*amp
     	          } else {
                    re := 7*amp
		  }
		}
	      }
	    }
	  }
	}
      };

      if (x[3] == '0 && x[4] == '0 && x[5] == '0) then {
         im := -7*amp
      } else {
        if (x[3] == '0 && x[4] == '0 && x[5] == '1) then {
          im := -5*amp
   	} else {
          if (x[3] == '0 && x[4] == '1 && x[5] == '1) then {
            im := -3*amp
	  } else {
            if (x[3] == '0 && x[4] == '1 && x[5] == '0) then {
              im := -1*amp
	    } else {
              if (x[3] == '1 && x[4] == '1 && x[5] == '0) then {
                im := amp
  	      } else {
                if (x[3] == '1 && x[4] == '1 && x[5] == '1) then {
                  im := 3*amp
    	        } else {
                  if (x[3] == '1 && x[4] == '0 && x[5] == '1) then {
                    im := 5*amp
     	          } else {
                    im := 7*amp
		  }
		}
	      }
	    }
	  }
	}
      };

      outc := complex16{re=re; im=im}
    };

    emit outc
  }
}


let comp main = read[bit] >>> modulate_64qam() >>> write[complex16]
